#include <iostream>
#include <memory>
#include <math.h>

using namespace std;

class node {
public:
	int value;
	shared_ptr<node> right;
	
	shared_ptr<node> l_child;
	shared_ptr<node> r_child;
	node() {}
	node(int i) { value = i; }

};

class tree {
public:
	shared_ptr<node> root;
	int level;
	tree()
	{
		level = 0;
	}
	tree(int n);
	
	tree(const initializer_list<int>& V);//The first number in V is tree level;
	//the rest are values from top to bottom and from left to right
	//For example, to create the tree with n=3 in the diagram,
	//tree T1 = {3, 0,1,2,3,4,5,6}; //where the first 3 is tree level, and the rest are values
	
	void operator= (const tree& R);//L-value operator=
	
	friend ostream& operator<<(ostream& str, const tree& T);

};
tree::tree(int n)
{
	level = n;
	int sum = 0;
	for (int i = 0; i < level; i++)
	{
		sum += (int)pow(2, i);
	}
	for (int i = sum-1; i >= 0; i--)
	{
		shared_ptr<node>p1 = make_shared<node>(i);
		p1->right = root;
		root = p1;
	}
	
}
//tree::~tree()
//{
//	shared_ptr<node> p;
//	while (root != nullptr)
//	{
//		p = root->right;
//		delete[] root;
//		root = p;
//	}
//}
tree::tree(const initializer_list<int>& V)
{
	auto it1 = V.end() - 1;
	
	
	while (it1 != V.begin())
	{
		shared_ptr<node>p1 = make_shared<node>(*it1);
		//shared_ptr<node>p2 = p1;

		p1->right = root;
		root = p1;
		it1--;
		
	}
	level = *it1;
	

}

ostream& operator<<(ostream& str, const tree& T)
{
	shared_ptr<node> p = T.root;
	while (p)
	{
		str << p->value <<" ";
		p = p->right;
	}
	return str;

}


int main() {
	tree T1(3);
	cout << T1 << endl; //will print 0 1 2 3 4 5 6
	cout << T1.level << endl;
	tree T2 = { 4,10,11,12 };
	//tree T2 = { 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };
	cout << T2 << endl; //will print 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
	cout << T2.level << endl;




	getchar();
	getchar();
	return 0;
}